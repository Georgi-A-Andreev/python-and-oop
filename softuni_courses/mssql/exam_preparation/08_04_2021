CREATE DATABASE Service

GO

USE Service
GO
DROP DATABASE SERVICE
GO
USE MASTER
GO

-- problem 1

CREATE TABLE Users(
    Id INT PRIMARY KEY IDENTITY,
    Username VARCHAR(30) UNIQUE NOT NULL,
    [Password] VARCHAR(50) NOT NULL,
    [Name] VARCHAR(50),
    Birthdate DATE,
    Age INT CHECK(Age BETWEEN 14 AND 110),
    Email VARCHAR(50) NOT NULL
)

CREATE TABLE Departments(
    Id INT PRIMARY KEY IDENTITY,
    [Name] VARCHAR(50) NOT NULL
)

CREATE TABLE Employees(
    Id INT PRIMARY KEY IDENTITY,
    FirstName VARCHAR(25),
    LastName VARCHAR(25),
    Birthdate DATE,
    Age INT CHECK (Age BETWEEN 18 AND 110),
    DepartmentId INT FOREIGN KEY REFERENCES Departments(Id)
)

CREATE TABLE Categories(
    Id INT PRIMARY KEY IDENTITY,
    [Name] VARCHAR(50) NOT NULL,
    DepartmentId INT FOREIGN KEY REFERENCES Departments(Id) NOT NULL
)

CREATE TABLE Status(
    Id INT PRIMARY KEY IDENTITY,
    Label VARCHAR(20) NOT NULL
)

CREATE TABLE Reports(
    Id INT PRIMARY KEY IDENTITY,
    CategoryId INT FOREIGN KEY REFERENCES Categories(Id) NOT NULL,
    StatusId INT FOREIGN KEY REFERENCES [Status](Id) NOT NULL,
    OpenDate DATE NOT NULL,
    CloseDate DATE,
    [Description] VARCHAR(200) NOT NULL,
    UserId INT FOREIGN KEY REFERENCES Users(Id) NOT NULL,
    EmployeeId INT FOREIGN KEY REFERENCES Employees(Id)
)

-- PROBLEM 2

INSERT INTO Employees(FirstName, LastName, Birthdate, DepartmentId)
VALUES
('Marlo',   'O''Malley',    1958-9-21,  1),
('Niki',    'Stanaghan',    1969-11-26, 4),
('Ayrton',  'Senna',    1960-03-21, 9),
('Ronnie',  'Peterson', 1944-02-14, 9),
('Giovanna',    'Amati',    1959-07-20, 5)

INSERT INTO Reports(CategoryId, StatusId, OpenDate, CloseDate, [Description], UserId, EmployeeId)
VALUES
(1, 1,  2017-04-13, NULL    ,'Stuck Road on Str.133',   6,  2),
(6, 3,  2015-09-05, 2015-12-06, 'Charity trail running',    3,  5),
(14,    2,  2015-09-07, NULL,       'Falling bricks on Str.58', 5,  2),
(4, 3,  2017-07-03, 2017-07-06, 'Cut off streetlight on Str.11',    1,  1)

-- PROBLEM 3

UPDATE Reports
SET CloseDate = GETDATE()
WHERE CloseDate IS NULL

-- PROBLEM 4

DELETE FROM Reports
WHERE StatusId = 4

-- PROBLEM 5

    SELECT [Description],
           CONVERT(VARCHAR, OpenDate, 105)
        AS OpenDate
      FROM Reports
     WHERE EmployeeId IS NULL
  ORDER BY CAST(OpenDate AS DATE),
           [Description]

-- PROBLEM 6

  SELECT r.[Description],
         c.[Name]
      AS CategoryName
    FROM Reports
      AS r
LEFT JOIN Categories
      AS  c
      ON c.Id = r.CategoryId
ORDER BY R.[Description], C.Name

-- PROBLEM 7

  SELECT TOP 5
         C.Name
      AS CategoryName,
         COUNT(*)
      AS ReportsNumber
    FROM Categories
      AS c
    JOIN Reports
      AS r
      ON C.Id = R.CategoryId
GROUP BY c.Name
ORDER BY COUNT(*) DESC,
         C.Name

-- PROBLEM 8

    SELECT u.Username,
           c.Name
        AS CategoryName
      FROM Users
        AS u
RIGHT JOIN Reports
        AS r
        ON r.UserId = u.Id
 LEFT JOIN Categories
        AS c
        ON c.Id = r.CategoryId
     WHERE DAY(r.OpenDate) = DAY(U.Birthdate)
  ORDER BY U.Username,
           C.Name

-- PROBLEM 9


  SELECT CONCAT(E.FirstName, ' ', E.LastName)
      AS FullName,
         COUNT(DISTINCT u.Name)
      AS UserCount
    FROM Employees
      AS e
LEFT    JOIN Reports
      AS r
      ON E.Id = R.EmployeeId
LEFT    JOIN Users
      AS u
      ON U.Id = R.UserId
GROUP BY CONCAT(E.FirstName, ' ', E.LastName)
ORDER BY UserCount DESC, FullName

-- PROBLEM 10 'doesnt work for some strange reason

    SELECT CONCAT(E.FirstName, ' ', E.LastName)
      AS Employee,
         D.[Name]
      AS Department,
         C.Name
      AS Category,
         R.[Description],
         CONVERT(VARCHAR, OpenDate, 104)
      AS OpenDate,
         S.Label
      AS [Status],
         CASE WHEN U.Name IS NULL THEN 'None' ELSE U.Name
     END
      AS [User]
      FROM Reports
        AS r
      JOIN Employees
        AS e
        ON r.EmployeeId = e.Id
      JOIN Departments
        AS d
        ON D.Id = E.DepartmentId
      JOIN Categories
        AS c
        ON R.CategoryId = C.Id
      JOIN [Status]
        AS S
        ON S.Id = R.StatusId
      JOIN Users
        AS U
        ON U.Id = R.UserId
    ORDER BY E.FirstName DESC,
         E.LastName DESC,
         Department,
         Category,
         [Description],
         CAST(OpenDate AS DATE),
         [Status],
         [User]

-- problem 11
GO

CREATE FUNCTION udf_HoursToComplete(@StartDate DATETIME, @EndDate DATETIME)
RETURNS INT
AS
BEGIN
            DECLARE @diff INT
                IF (@StartDate IS NULL OR @EndDate IS NULL)
                BEGIN
                SET @diff =  0
                END
                ELSE SET @diff = DATEDIFF(HOUR, @StartDate, @EndDate)
                RETURN @diff

END

go

SELECT dbo.udf_HoursToComplete(OpenDate, CloseDate) AS TotalHours
   FROM Reports

-- problem 12   1/2 done , dont know how to throw exeption

go

CREATE OR ALTER PROCEDURE usp_AssignEmployeeToReport(@EmployeeId INT, @ReportId INT)
AS
BEGIN

             IF (SELECT DepartmentId
                   FROM Employees
                  WHERE Id = @EmployeeId) =  (SELECT c.DepartmentId
                                               FROM Reports
                                                 AS r
                                               JOIN Categories
                                                 AS c
                                                 ON r.CategoryId = c.Id
                                              WHERE r.Id = @ReportId)
            BEGIN
        UPDATE Reports
        SET EmployeeId = @EmployeeId
        WHERE Id = @ReportId
            END
            ELSE IF (SELECT DepartmentId
                   FROM Employees
                  WHERE Id = @EmployeeId) !=  (SELECT c.DepartmentId
                                               FROM Reports
                                                 AS r
                                               JOIN Categories
                                                 AS c
                                                 ON r.CategoryId = c.Id
                                              WHERE r.Id = @ReportId)

               BEGIN
               THROW  (50001 ,"Employee doesn't belong to the appropriate department!", 1);
               END

END

GO

