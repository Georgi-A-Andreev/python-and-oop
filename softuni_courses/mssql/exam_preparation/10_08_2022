-- EXAM 10.08.2022

CREATE DATABASE NationalTouristSitesOfBulgaria

GO

USE NationalTouristSitesOfBulgaria

GO

-- PEOBLEM 1

CREATE TABLE Categories (
  Id INT PRIMARY KEY IDENTITY,
  Name VARCHAR(50) NOT NULL
)

CREATE TABLE Locations(
  Id INT PRIMARY KEY IDENTITY,
  Name VARCHAR(50) NOT NULL,
  Municipality VARCHAR(50),
  Province VARCHAR(50)
)

CREATE TABLE Sites(
  Id INT PRIMARY KEY IDENTITY,
  Name VARCHAR(100) NOT NULL,
  LocationId INT FOREIGN KEY REFERENCES Locations(Id) NOT NULL,
  CategoryId INT FOREIGN KEY REFERENCES Categories(Id) NOT NULL,
  Establishment VARCHAR(15)
)

CREATE TABLE Tourists(
  Id INT PRIMARY KEY IDENTITY,
  Name VARCHAR(50) NOT NULL,
  Age INT CHECK(Age >= 0 and Age <= 120) NOT NULL,
  PhoneNumber VARCHAR(20) NOT NULL,
  Nationality VARCHAR(30) NOT NULL,
  Reward VARCHAR(20)
)

CREATE TABLE SitesTourists(
  TouristId INT FOREIGN KEY REFERENCES Tourists(Id) NOT NULL,
  SiteId INT FOREIGN KEY REFERENCES Sites(Id) NOT NULL,
  PRIMARY KEY (TouristId, SiteId)
)

CREATE TABLE BonusPrizes(
  Id INT PRIMARY KEY IDENTITY,
  Name VARCHAR(50) NOT NULL
)

CREATE TABLE TouristsBonusPrizes(
  TouristId INT FOREIGN KEY REFERENCES Tourists(Id) NOT NULL,
  BonusPrizeId INT FOREIGN KEY REFERENCES BonusPrizes(Id) NOT NULL,
  PRIMARY KEY (TouristId, BonusPrizeId)
)

-- problem 2

INSERT INTO Tourists( Name, Age, PhoneNumber, Nationality, Reward)
VALUES
('Borislava Kazakova',  52,   '+359896354244',  'Bulgaria', NULL),
('Peter Bosh',  48, '+447911844141',  'UK', NULL),
('Martin Smith',  29, '+353863818592',  'Ireland',  'Bronze badge'),
('Svilen Dobrev', 49  ,'+359986584786'  ,'Bulgaria',  'Silver badge'),
('Kremena Popova',  38, '+359893298604',  'Bulgaria', NULL)

INSERT INTO Sites (Name, LocationId, CategoryId, Establishment)
VALUES
('Ustra fortress' ,   90,   7,  'X'),
('Karlanovo Pyramids',  65, 7,  NULL),
('The Tomb of Tsar Sevt', 63, 8,  'V BC'),
('Sinite Kamani Natural Park',  17, 1,  NULL),
('St. Petka of Bulgaria â€“ Rupite',  92, 6,  '1994')

-- problem 3

UPDATE Sites
SET Establishment = '(not defined)'
WHERE Establishment IS NULL

-- PROBLEM 4

DELETE FROM TouristsBonusPrizes
WHERE BonusPrizeId = 5

DELETE FROM BonusPrizes
WHERE Id = 5

-- problem 5

  SELECT Name,
         Age,
         PhoneNumber,
         Nationality
    FROM Tourists
ORDER BY Nationality,
         Age DESC,
         Name

-- problem 6

  SELECT s.Name,
         l.Name,
         s.Establishment,
         c.Name
    FROM Sites
      AS s
    JOIN Locations
      AS l
      ON l.Id = s.LocationId
    JOIN Categories
      AS c
      ON c.Id = s.CategoryId
ORDER BY c.Name DESC,
         l.Name,
         s.Name

--problem 7

  SELECT l.Province, l.Municipality,l.Name AS Location, COUNT(*) AS CountOfSites
    FROM Sites
      AS s
    JOIN Locations
      AS l
      ON s.LocationId = l.Id
   WHERE L.Province = 'Sofia'
GROUP BY l.Province, l.Municipality, l.Name
ORDER BY CountOfSites DESC, Location

--problem 8

  SELECT s.Name AS Site, l.Name as Location, l.Municipality, l.Province, s.Establishment
    FROM Sites
      AS s
    JOIN Locations
      AS l
      ON l.Id = s.LocationId
   WHERE s.Establishment LIKE '%BC%' AND l.Name NOT LIKE 'B%' AND l.Name NOT LIKE 'M%' and l.Name NOT LIKE 'D%'
ORDER BY Site

-- problem 9

   SELECT t.Name, t.Age, t.PhoneNumber, t.Nationality,
      CASE WHEN bp.Name IS NULL THEN '(no bonus prize)'
          ELSE bp.Name
      END
       AS Reward
     FROM Tourists
       AS t
LEFT JOIN TouristsBonusPrizes
       AS tbp
       ON tbp.TouristId = t.Id
LEFT JOIN BonusPrizes
       AS bp
       ON BP.Id = tbp.BonusPrizeId
 ORDER BY T.Name

 -- problem 10

    SELECT DISTINCT SUBSTRING(t.Name, CHARINDEX(' ', t.Name), LEN(t.Name))
        AS LastName,
           t.Nationality,
           t.Age,
           t.PhoneNumber
      FROM Tourists
        AS t
      JOIN SitesTourists
        AS sp
        ON sp.TouristId = t.Id
      JOIN Sites
        AS s
        ON s.Id = sp.SiteId
      JOIN Categories
        AS c
        ON c.Id = s.CategoryId
     WHERE c.Name = 'History and archaeology'
  ORDER BY LastName

  -- PROBLEM 11
GO

CREATE FUNCTION udf_GetTouristsCountOnATouristSite (@Site VARCHAR(100))
RETURNS INT
AS
BEGIN
      RETURN(
        SELECT COUNT(*)
          FROM Sites
            AS s
          JOIN SitesTourists
            AS st
            ON s.Id = st.SiteId
          JOIN Tourists
            AS t
            ON t.Id = st.TouristId
         WHERE @Site = S.[Name]
        )
END

GO

-- PROBLEM 12

GO

CREATE PROCEDURE usp_AnnualRewardLottery @TouristName VARCHAR(50)
AS
BEGIN
   IF(SELECT COUNT(*)
          AS PlacesVisited
        FROM Tourists
          AS t
        JOIN SitesTourists
          AS st
          ON st.TouristId = t.Id
        JOIN Sites
          AS s
          ON s.Id = st.SiteId
       WHERE t.Name = @TouristName
          ) >= 100
        BEGIN
        UPDATE Tourists
           SET Reward = 'Gold Badge'
         WHERE @TouristName = [Name]
        END
    ELSE IF(SELECT COUNT(*)
          AS PlacesVisited
        FROM Tourists
          AS t
        JOIN SitesTourists
          AS st
          ON st.TouristId = t.Id
        JOIN Sites
          AS s
          ON s.Id = st.SiteId
       WHERE t.Name = @TouristName
          ) >= 50
        BEGIN
        UPDATE Tourists
           SET Reward = 'Silver badge'
         WHERE [Name] = @TouristName
        END
    ELSE IF (SELECT COUNT(*)
          AS PlacesVisited
        FROM Tourists
          AS t
        JOIN SitesTourists
          AS st
          ON st.TouristId = t.Id
        JOIN Sites
          AS s
          ON s.Id = st.SiteId
       WHERE t.Name = @TouristName
          ) >= 25
          BEGIN
          UPDATE Tourists
             SET Reward = 'Bronze badge'
           WHERE [Name] = @TouristName
          END
SELECT [Name], Reward
  FROM Tourists
WHERE Name = @TouristName
END

EXEC usp_AnnualRewardLottery 'Gerhild Lutgard'

EXEC usp_AnnualRewardLottery 'Teodor Petrov'


