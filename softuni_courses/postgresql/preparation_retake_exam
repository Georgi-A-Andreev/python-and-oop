CREATE TABLE owners(
	id SERIAL PRIMARY KEY,
	name VARCHAR(50) NOT NULL,
	phone_number VARCHAR(15) NOT NULL,
	address VARCHAR(50)
);

CREATE TABLE animal_types(
	id SERIAL PRIMARY KEY,
	animal_type VARCHAR(30) NOT NULL
);

CREATE TABLE cages(
	id SERIAL PRIMARY KEY,
	animal_type_id INT NOT NULL,
	CONSTRAINT fk_cages_animal_types
	FOREIGN KEY (animal_type_id)
	REFERENCES animal_types(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE animals(
	id SERIAL PRIMARY KEY,
	name VARCHAR(30) NOT NULL,
	birthdate DATE NOT NULL,
	owner_id INT,
	animal_type_id INT NOT NULL,
	CONSTRAINT fk_animals_owners
	FOREIGN KEY (owner_id)
	REFERENCES owners(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	CONSTRAINT fk_animals_animal_types
	FOREIGN KEY (animal_type_id)
	REFERENCES animal_types(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);
CREATE TABLE volunteers_departments(
	id SERIAL PRIMARY KEY,
	department_name VARCHAR(30) NOT NULL
);



CREATE TABLE volunteers(
	id SERIAL PRIMARY KEY,
	name VARCHAR(50) NOT NULL,
	phone_number VARCHAR(15) NOT NULL,
	address VARCHAR(50),
	animal_id INT,
	department_id INT NOT NULL,
	CONSTRAINT fk_volunteers_animals
	FOREIGN KEY (animal_id)
	REFERENCES animals(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	CONSTRAINT fk_volunteers_volunteers_departments
	FOREIGN KEY (department_id)
	REFERENCES volunteers_departments(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);



CREATE TABLE animals_cages(
	cage_id INT NOT NULL,
	animal_id INT NOT NULL,
	CONSTRAINT fk_animals_cages_cages
	FOREIGN KEY (cage_id)
	REFERENCES cages("id")
	ON DELETE CASCADE
	ON UPDATE CASCADE,
    CONSTRAINT fk_animals_cages_animals
	FOREIGN KEY (animal_id)
	REFERENCES animals("id")
	ON DELETE CASCADE
	ON UPDATE CASCADE
);


INSERT INTO animals(name, birthdate, owner_id, animal_type_id)
VALUES
('Giraffe',	'2018-09-21',	21,	1),
('Harpy Eagle',	'2015-04-17',	15,	3),
('Hamadryas Baboon',	'2017-11-02',	NULL,	1),
('Tuatara',	'2021-06-30',	2,	4);


INSERT INTO volunteers(name, phone_number, address, animal_id,department_id)
VALUES
('Anita Kostova',	'0896365412',	'Sofia, 5 Rosa str.',	15,	1),
('Dimitur Stoev',	'0877564223',	NULL,	42,	4),
('Kalina Evtimova',	'0896321112',	'Silistra, 21 Breza str.',	9,	7),
('Stoyan Tomov',	'0898564100',	'Montana, 1 Bor str.',	18,	8),
('Boryana Mileva',	'0888112233',	NULL,	31,	5);



UPDATE animals
SET owner_id = (SELECT id FROM owners WHERE name = 'Kaloqn Stoqnov')
WHERE owner_id is NULL;

DELETE FROM volunteers
WHERE department_id =
(SELECT id FROM volunteers_departments WHERE department_name = 'Education program assistant');

DELETE FROM volunteers_departments
WHERE department_name = 'Education program assistant';

SELECT name,
		phone_number,
		address,
		animal_id,
		department_id
FROM volunteers
ORDER BY name, animal_id, department_id;

SELECT a.name, at.animal_type, 	TO_CHAR(a.birthdate, 'DD.MM.YYYY') as birthdate
FROM animals as a
JOIN animal_types as at
ON a.animal_type_id = at.id
ORDER BY a.name;


SELECT o.name,
		COUNT(a.owner_id) AS animals
FROM owners as o
JOIN animals as a
ON a.owner_id = o.id
GROUP BY o.name
ORDER BY COUNT(a.owner_id) DESC, o.name
LIMIT 5;

SELECT CONCAT(o.name, ' - ', a.name) AS "Owners - Animals",
		o.phone_number AS "Phone Number",
		ac.cage_id AS "Cage ID"
FROM owners AS o
 JOIN animals AS a
ON o.id = a.owner_id
 JOIN animal_types AS at
ON at.id = a.animal_type_id
 JOIN animals_cages AS ac
ON ac.animal_id = a.id
WHERE at.animal_type = 'Mammals'
ORDER BY o.name, a.name DESC;


SELECT 	name as volunteers,
		phone_number,
		TRIM(TRIM(TRIM(TRIM(address), 'Sofia')), ', ') AS address
FROM volunteers as v
JOIN volunteers_departments as vd
ON vd.id = v.department_id
WHERE address LIKE '%Sofia%' AND vd.department_name = 'Education program assistant'
ORDER BY name

SELECT name AS animal,
		EXTRACT(YEAR FROM birthdate) AS birth_year,
		at.animal_type AS animal_type
FROM animals AS a
JOIN animal_types AS at
ON a.animal_type_id = at.id

WHERE owner_id IS null AND birthdate > '01/01/2017' AND animal_type_id != 3
ORDER BY name

CREATE FUNCTION fn_get_volunteers_count_from_department(searched_volunteers_department VARCHAR(30))
RETURNS INT
AS
$$
DECLARE total INT;
BEGIN
		SELECT COUNT(*) INTO total
		FROM volunteers AS v
		JOIN volunteers_Departments as vd
		ON v.department_id = vd.id
		WHERE vd.department_name = searched_volunteers_department;

	RETURN total;

END;
$$
LANGUAGE plpgsql;

CREATE PROCEDURE sp_animals_with_owners_or_not(IN animal_name VARCHAR(30), OUT ownerx2 VARCHAR)
AS
$$
DECLARE owner INT DEFAULT NULL;
BEGIN
		SELECT owner_id INTO owner
		FROM animals
		WHERE name = animal_name;
		IF owner IS NULL THEN ownerx2 := 'For adoption';
		ELSE SELECT name INTO ownerx2
		FROM owners
		WHERE id = owner;
		END IF;
END
$$
LANGUAGE plpgsql;


CREATE TABLE addresses(
	id SERIAL PRIMARY KEY,
	name VARCHAR(100) NOT NULL
);

CREATE TABLE categories(
	id SERIAL PRIMARY KEY,
	name VARCHAR(10) NOT NULL
);

CREATE TABLE clients(
	id SERIAL PRIMARY KEY,
	full_name VARCHAR(50) NOT NULL,
	phone_number VARCHAR(20) NOT NULL
);


CREATE TABLE drivers(
	id SERIAL PRIMARY KEY,
	first_name VARCHAR(30) NOT NULL,
	last_name VARCHAR(30) NOT NULL,
	age INT NOT NULL,
	rating NUMERIC(2) DEFAULT 5.5,
	CONSTRAINT ck_age_positive
	CHECK (age > 0)
);

CREATE TABLE cars(
	id SERIAL PRIMARY KEY,
	make VARCHAR(20) NOT NULL,
	model VARCHAR(20),
	year INT DEFAULT 0 NOT NULL,
	mileage INT DEFAULT 0,
	condition CHAR NOT NULL,
	category_id INT NOT NULL,
	CONSTRAINT ck_year_positive
	CHECK (year > 0),
	CONSTRAINT ck_mileage_positive
	CHECK (mileage > 0),
	CONSTRAINT fk_cars_categories
	FOREIGN KEY (category_id)
	REFERENCES categories(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE courses(
	id SERIAL PRIMARY KEY,
	from_address_id INT NOT NULL,
	start TIMESTAMP NOT NULL,
	bill NUMERIC(10,2) DEFAULT 10,
	car_id INT NOT NULL,
	client_id INT NOT NULL,
	CONSTRAINT fk_courses_addresses
	FOREIGN KEY (from_address_id)
	REFERENCES addresses(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	CONSTRAINT ck_bill_positive
	CHECK (bill > 0),
	CONSTRAINT fk_courses_cars
	FOREIGN KEY (car_id)
	REFERENCES cars(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	CONSTRAINT fk_courses_clients
	FOREIGN KEY (client_id)
	REFERENCES clients(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE cars_drivers(
	car_id INT NOT NULL,
	driver_id INT NOT NULL,
	CONSTRAINT fk_cars_drivers_cars
	FOREIGN KEY (car_id)
	REFERENCES cars(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	CONSTRAINT fk_cars_drivers_drivers
	FOREIGN KEY (driver_id)
	REFERENCES drivers(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);



