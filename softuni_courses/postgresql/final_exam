CREATE TABLE countries (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL
);


CREATE TABLE customers (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(25) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    gender CHAR(1) CHECK (gender IN ('F', 'M')),
    age INTEGER CHECK (age > 0) NOT NULL,
    phone_number VARCHAR(10) NOT NULL,
    country_id INTEGER REFERENCES countries(id) ON DELETE CASCADE NOT NULL
        CHECK (country_id > 0)
);

CREATE TABLE products(
	id SERIAL PRIMARY KEY,
	name VARCHAR(25) NOT NULL,
	description VARCHAR(250),
	recipe TEXT,
	price NUMERIC(10,2) NOT NULL,
	CONSTRAINT ck_price_positive
	CHECK (price > 0)
);


CREATE TABLE feedbacks(
	id SERIAL PRIMARY KEY,
	description VARCHAR(255),
	rate NUMERIC(4,2),
	product_id INT NOT NULL,
	customer_id INT NOT NULL,
	CONSTRAINT ck_rate
	CHECK (rate BETWEEN 0 AND 10),
	CONSTRAINT fk_feedbacks_products
	FOREIGN KEY (product_id)
	REFERENCES products(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	CONSTRAINT fk_feedbacks_customers
	FOREIGN KEY (customer_id)
	REFERENCES customers(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE distributors(
	id SERIAL PRIMARY KEY,
	name VARCHAR(25) NOT NULL,
	address VARCHAR(30) NOT NULL,
	summary VARCHAR(200) NOT NULL,
	country_id INT NOT NULL,
	CONSTRAINT fk_distributors_countries
	FOREIGN KEY (country_id)
	REFERENCES countries(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	CONSTRAINT unique_name
	UNIQUE (name)
);

CREATE TABLE ingredients(
	id SERIAL PRIMARY KEY,
	name VARCHAR(30) NOT NULL,
	description VARCHAR(200),
	country_id INT NOT NULL,
	distributor_id INT NOT NULL,
	CONSTRAINT fk_ingredients_countries
	FOREIGN KEY (country_id)
	REFERENCES countries(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	CONSTRAINT fk_ingredients_distributors
	FOREIGN KEY (distributor_id)
	REFERENCES distributors(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE products_ingredients(
	product_id INT,
	ingredient_id INT,
	CONSTRAINT fk_products_ingredients_products
	FOREIGN KEY (product_id)
	REFERENCES products(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
	CONSTRAINT fk_products_ingredients_ingredients
	FOREIGN KEY (ingredient_id)
	REFERENCES ingredients(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);
-- CREATE TABLE gift_recipients(
-- 	id SERIAL PRIMARY KEY,
-- 	name VARCHAR(255),
-- 	country_id INT,
-- 	gift_sent BOOLEAN DEFAULT False
-- );



CREATE TABLE gift_recipients (
    id SERIAL PRIMARY KEY,
    name TEXT,
    country_id INT,
    gift_sent BOOLEAN DEFAULT False
);

INSERT INTO gift_recipients (name, country_id)
	SELECT
			CONCAT(first_name, ' ', last_name) as name,
			country_id
	FROM customers;

UPDATE gift_recipients
SET gift_sent = TRUE
WHERE country_id IN (7, 8, 14, 17, 26);

select * from gift_recipients
order by id
drop table gift_recipients

CREATE TABLE gift_recipients (
	id INT primary key,
	SELECT
			CONCAT(first_name, ' ', last_name) as name,
			country_id,
			CASE WHEN country_id IN ( 7, 8, 14, 17, 26) THEN True
			ELSE False
			END AS gift_sent
	FROM customers;)


CREATE TABLE gift_recipients (
    id SERIAL PRIMARY KEY,
    name TEXT,
    country_id INTEGER,
    gift_sent BOOLEAN DEFAULT FALSE
);
INSERT INTO gift_recipients (name, country_id, gift_sent)
SELECT
    first_name || ' ' || last_name AS name,
    country_id,
    CASE WHEN country_id IN (7, 8, 14, 17, 26) THEN TRUE ELSE FALSE END AS gift_sent
FROM customers;



UPDATE products
SET price = price * 1.1
WHERE id IN (14, 1, 20, 11, 25, 18, 30, 6, 3)

DELETE FROM distributors
WHERE name LIKE 'L%'


SELECT name,
recipe,
price
FROM products
WHERE price BETWEEN 10 AND 20
ORDER BY price DESC

select * from feedbacks


SELECT f.product_id,
	f.rate,
	f.description,
	f.customer_id,
	c.age,
	c.gender
FROM feedbacks as f
JOIN customers as c
ON f.customer_id = c.id
WHERE rate < 5 AND c.gender = 'F' AND c.age > 30
ORDER BY f.product_id DESC

select * from products



SELECT * FROM(
	SELECT p.name,
			ROUND(AVG(p.price), 2) AS average_price,
			COUNT(*) AS total_feedbacks
	FROM products p
	JOIN feedbacks as f
	ON f.product_id = p.id
	WHERE p.price > 15
	GROUP BY p.name
) as subquery
WHERE total_feedbacks > 1
ORDER BY total_feedbacks, average_price DESC



select * from ingredients


SELECT i.name as ingredient_name,
		p.name as product_name,
		d.name as distributor_name
FROM ingredients as i
JOIN products_ingredients as pi
ON pi.ingredient_id = i.id
JOIN products as p
ON p.id = pi.product_id
JOIN distributors AS d
ON d.id = i.distributor_id
WHERE d.country_id = 16 and LOWER(i.name) = 'mustard'
ORDER BY p.name


SELECT * FROM (
SELECT d.name as distributor_name,
		i.name as ingredient_name,
		p.name as product_name,
		AVG(f.rate) AS average_rate
FROM ingredients as i
JOIN products_ingredients as pi
ON pi.ingredient_id = i.id
JOIN products as p
ON p.id = pi.product_id
JOIN distributors AS d
ON d.id = i.distributor_id
JOIN feedbacks as f
ON f.product_id = p.id
GROUP BY d.name, i.name, p.name

ORDER BY d.name, i.name, p.name
) as subsquery
WHERE average_rate BETWEEN 5 AND 8







