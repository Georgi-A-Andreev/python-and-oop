-- problem 1

SELECT COUNT(*)
		AS Count
FROM wizard_deposits

-- problem 2

SELECT SUM(deposit_amount) AS "Total Amount"
FROM wizard_deposits

-- problem 3

SELECT
	ROUND(AVG(magic_wand_size), 3) AS "Avarage Magic Wand Size"
FROM wizard_deposits


select * from wizard_deposits

-- problem 4

SELECT MIN(deposit_charge) AS "Minimum Deposit Charge"
FROM wizard_deposits

-- problem 5

SELECT MAX(age) AS "Maximum Age"
FROM wizard_deposits

-- problem 6

SELECT deposit_group
		,sum(deposit_interest)
FROM wizard_deposits
GROUP BY deposit_group
ORDER BY sum(deposit_interest) DESC

-- problem 7

SELECT magic_wand_creator,
		MIN(magic_wand_size) AS "Minimum Wand Size"
FROM wizard_deposits
GROUP BY magic_wand_creator
ORDER BY MIN(magic_wand_size)
LIMIT 5

-- problem 8

SELECT deposit_group,
		is_deposit_expired,
		FLOOR(AVG(deposit_interest)) AS "Deposit Interest"
FROM wizard_deposits
WHERE deposit_start_date > '1985-01-01'
GROUP BY deposit_group, is_deposit_expired
ORDER BY deposit_group DESC, is_deposit_expired

-- problem 9

SELECT last_name,
		COUNT(notes) AS "Notes with Dumbledore"
FROM wizard_deposits
WHERE notes LIKE '%Dumbledore%'
GROUP BY last_name

-- problem 10

CREATE VIEW view_wizard_deposits_with_expiration_date_before_1983_08_17
AS
SELECT CONCAT(first_name, ' ', last_name) AS "Wizard Name",
		deposit_start_date as "Start Date",
		deposit_expiration_date as "Expiration Date",
		deposit_amount AS Amount

FROM wizard_deposits
WHERE deposit_expiration_date <= '1983-08-17'
GROUP BY CONCAT(first_name, ' ', last_name), deposit_start_date, deposit_expiration_date, deposit_amount
ORDER BY deposit_expiration_date

-- problem 11

SELECT magic_wand_creator,
		MAX(deposit_amount) AS "Max Deposit Amount"
FROM wizard_Deposits
GROUP BY magic_wand_creator
HAVING MAX(deposit_amount) NOT BETWEEN 20000 AND 40000
ORDER BY MAX(deposit_amount) DESC
LIMIT 3


-- problem 13

SELECT
			COUNT(CASE WHEN department_id = 1 THEN 1 END) AS "Engineering",
			COUNT(CASE WHEN department_id = 2 THEN 1 END) AS "Tool Design",
			COUNT(CASE WHEN department_id = 3 THEN 1 END) AS "Sales",
			COUNT(CASE WHEN department_id = 4 THEN 1 END) AS "Marketing",
			COUNT(CASE WHEN department_id = 5 THEN 1 END) AS "Purchasing",
			COUNT(CASE WHEN department_id = 6 THEN 1 END) AS "Development",
			COUNT(CASE WHEN department_id = 7 THEN 1 END) AS "Production"
FROM employees

-- problem 14

UPDATE employees
SET salary = CASE
				WHEN hire_date < '2015-01-16' THEN salary + 2500
				WHEN hire_date < '2020-03-04' THEN salary + 1500
				ELSE salary
			END,
	job_title = CASE
				WHEN hire_date < '2015-01-16' THEN CONCAT('Senior ', job_title)
				WHEN hire_date < '2020-03-04' THEN CONCAT('Mid-', job_title)
				ELSE job_title
			END

-- problem 15

SELECT job_title,
		CASE
		WHEN AVG(salary) > 45800 THEN 'Good'
		WHEN AVG(salary) BETWEEN 27500 AND 45800 THEN 'Medium'
		WHEN AVG(salary) < 27500 THEN 'Need Improvement'

		END AS "Category"
FROM employees
GROUP BY job_title
ORDER BY "Category", job_title



























