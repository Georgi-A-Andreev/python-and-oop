-- problem 1

CREATE FUNCTION fn_full_name(first_name VARCHAR, last_name VARCHAR)
RETURNS VARCHAR
AS
$$
DECLARE
	full_name VARCHAR;
BEGIN
	full_name := CONCAT(INITCAP(first_name), ' ', INITCAP(last_name));
	RETURN full_name;
END;
$$
LANGUAGE plpgsql;

-- problem 2

CREATE FUNCTION fn_calculate_future_value(initial_sum DECIMAL, yearly_interest_rate DECIMAL, number_of_years INT)
RETURNS DECIMAL
AS
$$
	BEGIN
	RETURN TRUNC(initial_sum * POWER(1 + yearly_interest_rate,number_of_years), 4);
	END;
$$
LANGUAGE plpgsql;

select * from fn_calculate_future_value(1000, 0.1, 5)


-- problem 3

CREATE FUNCTION fn_is_word_comprised(set_of_letters VARCHAR(50), word VARCHAR(50))
RETURNS BOOLEAN
AS
$$
BEGIN
		RETURN TRIM(LOWER(word), LOWER(set_of_letters)) = '';
END;
$$
LANGUAGE plpgsql;


-- problem 4

CREATE FUNCTION fn_is_game_over (is_game_over BOOLEAN)
RETURNS TABLE (name VARCHAR(50), game_type_id INT, is_finished BOOLEAN)
AS
$$
	BEGIN
		RETURN QUERY SELECT name, game_type_id, is_finished
				FROM games
				WHERE is_finished = is_game_over;
	END;
$$
LANGUAGE plpgsql;


-- problem 5

CREATE FUNCTION fn_difficulty_level(level INT)
RETURNS VARCHAR
AS
$$
	BEGIN
		IF level <= 40 THEN RETURN 'Normal Difficulty';
		ELSIF level BETWEEN 41 and 60 THEN RETURN 'Nightmare Difficulty';
		ELSE RETURN 'Hell Difficulty';
		END IF;
	END;
$$
LANGUAGE plpgsql;


-- problem 8

CREATE PROCEDURE sp_deposit_money (account_id INT, money_amount NUMERIC(12,4))
AS
$$
	BEGIN
		UPDATE accounts
		SET balance = balance + money_amount
		WHERE id = account_id;
		COMMIT;
	END;
$$
LANGUAGE plpgsql;

-- problem 9

CREATE PROCEDURE sp_withdraw_money(account_id INT, money_amount NUMERIC(10,4))
AS
$$
BEGIN
	IF (SELECT a.balance FROM accounts as a WHERE a.id = account_id) < money_amount
	THEN RAISE NOTICE 'Insufficient balance to withdraw %', (SELECT a.balance FROM accounts as a WHERE a.id = account_id);
	ELSE
	UPDATE accounts
	SET balance = balance - money_amount
	WHERE id = account_id;
	END IF;
	COMMIT;
END;
$$
LANGUAGE plpgsql;
