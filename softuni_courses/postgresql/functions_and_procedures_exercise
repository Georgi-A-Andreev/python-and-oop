-- problem 1

CREATE FUNCTION fn_full_name(first_name VARCHAR, last_name VARCHAR)
RETURNS VARCHAR
AS
$$
DECLARE
	full_name VARCHAR;
BEGIN
	full_name := CONCAT(INITCAP(first_name), ' ', INITCAP(last_name));
	RETURN full_name;
END;
$$
LANGUAGE plpgsql;

-- problem 2

CREATE FUNCTION fn_calculate_future_value(initial_sum DECIMAL, yearly_interest_rate DECIMAL, number_of_years INT)
RETURNS DECIMAL
AS
$$
	BEGIN
	RETURN TRUNC(initial_sum * POWER(1 + yearly_interest_rate,number_of_years), 4);
	END;
$$
LANGUAGE plpgsql;

select * from fn_calculate_future_value(1000, 0.1, 5)


-- problem 3

CREATE FUNCTION fn_is_word_comprised(set_of_letters VARCHAR(50), word VARCHAR(50))
RETURNS BOOLEAN
AS
$$
BEGIN
		RETURN TRIM(LOWER(word), LOWER(set_of_letters)) = '';
END;
$$
LANGUAGE plpgsql;


-- problem 4

CREATE FUNCTION fn_is_game_over (is_game_over BOOLEAN)
RETURNS TABLE (name VARCHAR(50), game_type_id INT, is_finished BOOLEAN)
AS
$$
	BEGIN
		RETURN QUERY SELECT name, game_type_id, is_finished
				FROM games
				WHERE is_finished = is_game_over;
	END;
$$
LANGUAGE plpgsql;


-- problem 5

CREATE FUNCTION fn_difficulty_level(level INT)
RETURNS VARCHAR
AS
$$
	BEGIN
		IF level <= 40 THEN RETURN 'Normal Difficulty';
		ELSIF level BETWEEN 41 and 60 THEN RETURN 'Nightmare Difficulty';
		ELSE RETURN 'Hell Difficulty';
		END IF;
	END;
$$
LANGUAGE plpgsql;


-- problem 8

CREATE PROCEDURE sp_deposit_money (account_id INT, money_amount NUMERIC(12,4))
AS
$$
	BEGIN
		UPDATE accounts
		SET balance = balance + money_amount
		WHERE id = account_id;
	END;
$$
LANGUAGE plpgsql;

-- problem 9

CREATE PROCEDURE sp_withdraw_money(account_id INT, money_amount NUMERIC(10,4))
AS
$$
BEGIN
	IF (SELECT a.balance FROM accounts as a WHERE a.id = account_id) < money_amount
	THEN RAISE NOTICE 'Insufficient balance to withdraw %', (SELECT a.balance FROM accounts as a WHERE a.id = account_id);
	ELSE
	UPDATE accounts
	SET balance = balance - money_amount
	WHERE id = account_id;
	END IF;
END;
$$
LANGUAGE plpgsql;


-- problem 10

CREATE PROCEDURE sp_transfer_money (sender_id INT, receiver_id INT, amount NUMERIC(10,4))
AS
$$
DECLARE current NUMERIC;
BEGIN
	current = (SELECT balance FROM accounts WHERE id = sender_id);
	CALL sp_withdraw_money(sender_id, amount);
	IF (SELECT balance FROM accounts WHERE id = sender_id) = current THEN ROLLBACK;
	ELSE CALL sp_deposit_money(receiver_id, amount);
	END IF;
END;
$$
LANGUAGE plpgsql;


-- problem 11

DROP PROCEDURE sp_retrieving_holders_with_balance_higher_than


-- problem 12

CREATE TABLE logs (
	id SERIAL PRIMARY KEY,
	account_id INT,
	old_sum NUMERIC(20, 4),
	new_sum NUMERIC(20, 4)
);

CREATE OR REPLACE FUNCTION
	trigger_fn_insert_new_entry_into_logs()
RETURNS TRIGGER AS
$$
BEGIN
	INSERT INTO
		logs(account_id, old_sum, new_sum)
	VALUES
		(OLD.id, OLD.balance, NEW.balance);

	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER
	tr_account_balance_change
AFTER UPDATE OF balance ON accounts
FOR EACH ROW
WHEN
	(NEW.balance <> OLD.balance)
EXECUTE FUNCTION
	trigger_fn_insert_new_entry_into_logs();

-- problem 13

CREATE TABLE notification_emails (
	id SERIAL PRIMARY KEY,
	recipient_id INT,
	subject VARCHAR(255),
	body TEXT
);

CREATE OR REPLACE FUNCTION
	trigger_fn_send_email_on_balance_change()
RETURNS TRIGGER AS
$$
BEGIN
	INSERT INTO
		notification_emails(recipient_id, subject, body)
	VALUES (
		NEW.account_id,
		'Balance change for account: ' || NEW.account_id,
		'On ' || DATE(NOW()) || ' your balance was changed from ' || NEW.old_sum || ' to ' || NEW.new_sum || '.'
	);

	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER
	tr_send_email_on_balance_change
AFTER UPDATE ON logs
FOR EACH ROW
WHEN
	(OLD.new_sum <> NEW.new_sum)
EXECUTE FUNCTION trigger_fn_send_email_on_balance_change();

