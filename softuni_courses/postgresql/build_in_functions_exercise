-- problem 1

CREATE VIEW view_river_info
AS
SELECT CONCAT('The river', ' ', river_name, ' ', 'flows into the', ' ', outflow, ' ', 'and is', ' ', "length", ' ', 'kilometers long.') AS "River Information"
FROM rivers
ORDER BY river_name

-- problem 2

CREATE VIEW view_continents_countries_currencies_details
AS
SELECT
	CONCAT(TRIM(c.continent_name), ': ', c.continent_code) AS "Continent Details",
	CONCAT(co.country_name, ' - ', co.capital, ' - ', area_in_sq_km, ' - ', 'km2') AS "Country Information",
	CONCAT(cu.description, ' (', cu.currency_code, ')') AS Currencies
FROM
	continents as c
	JOIN countries as co
	ON co.continent_code = c.continent_code
	JOIN currencies as cu
	ON co.currency_code = cu.currency_code
ORDER BY "Country Information", Currencies

-- problem 3

ALTER TABLE countries
ADD COLUMN capital_code CHAR(2);
UPDATE countries
SET capital_code = substring(capital FROM 1 FOR 2)

-- problem 4

SELECT SUBSTRING(description FROM 5)
FROM currencies

- problem 5

SELECT (REGEXP_MATCHES("River Information", '[0-9]{1,4}'))[1] AS river_length
FROM view_river_info
WHERE "River Information" ~ '[0-9]{1,4}';

-- problem 6

SELECT
	REPLACE(mountain_range, 'a', '@') AS replace_a,
	REPLACE(mountain_range, 'A', '$') AS replace_A
FROM mountains

-- problem 7

SELECT capital,
		TRANSLATE(capital, 'áãåçéíñóú', 'aaaceinou') AS translated_name
FROM countries

-- problem 8

SELECT continent_name,
		TRIM(continent_name) AS trim
FROM continents

-- problem 9

SELECT continent_name,
		TRIM(TRAILING continent_name) AS trim
FROM continents

-- problem 10

SELECT LTRIM(peak_name, 'M') AS "Left Trim",
		RTRIM(peak_name, 'm') AS "Right Trim"
FROM peaks

-- problem 11

SELECT CONCAT(m.mountain_range, ' ', p.peak_name) AS "Mountain Information",
		CHAR_LENGTH(CONCAT(m.mountain_range, ' ', p.peak_name)) AS "Characters Length",
		BIT_LENGTH(CONCAT(m.mountain_range, ' ', p.peak_name)) AS "Bits of a String"
FROM
	mountains AS m
	JOIN peaks as p
	ON m.id = p.mountain_id

-- problem 12

SELECT population,
		LENGTH(CAST(population AS TEXT)) AS length
FROM
	countries

-- problem 13

SELECT
	peak_name,
	LEFT(peak_name, 4) AS "Positive Left",
	CASE WHEN LENGTH(peak_name) > 4 THEN LEFT(peak_name, LENGTH(peak_name) - 4)
	ELSE ''
	END AS "Negative Left"
FROM
	peaks

-- problem 14

SELECT peak_name,
		RIGHT(peak_name, 4) AS "Positive Right",
		RIGHT(peak_name, -4) AS "Negative Right"
FROM
	peaks

-- problem 15

UPDATE countries
SET iso_code = UPPER(LEFT(country_name, 3))
WHERE iso_code IS NULL

-- problem 16

UPDATE countries
SET country_code = LOWER(REVERSE(country_code))

-- problem 17

SELECT CONCAT(elevation, ' ', REPEAT('-', 3), REPEAT('>', 2), ' ', peak_name) AS "Elevation --->> Peak Name"
FROM peaks
WHERE elevation >= 4884

-- problem 18

CREATE TABLE bookings_calculation
AS
SELECT booked_for,
		CAST(booked_for * 50 AS NUMERIC) AS multiplication,
		CAST(booked_for % 50 AS NUMERIC) AS modulo

FROM bookings
WHERE apartment_id = 93;

-- problem 19

SELECT latitude,
		ROUND(latitude, 2) AS round,
		TRUNC(latitude, 2) AS trunc
FROM apartments

-- problem 20

SELECT longitude,
		ABS(longitude) AS abs
FROM apartments

-- problem 22

SELECT EXTRACT(YEAR FROM booked_at) AS "YEAR",
		EXTRACT(MONTH FROM booked_at) AS "MONTH",
		EXTRACT(DAY FROM booked_at) AS "DAY",
		EXTRACT(HOUR FROM booked_at AT TIME ZONE 'UTC')  AS "HOUR",
		EXTRACT(MINUTE FROM booked_at) AS "MINUTE",
		CEILING(EXTRACT(SECOND FROM booked_at)) AS "SECOND"
FROM bookings

-- problem 24

SELECT companion_full_name,
		email
FROM users
WHERE companion_full_name ILIKE '%aNd%' AND email NOT ILIKE '%@gmail'


